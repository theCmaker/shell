#! /bin/bash

#fonctions et variables communes
function line()
{
  echo "--------------------------------------------------------------------------------"
}



function modify() #pas d'argument ; from writechannel
{
  line;
  read -p "Nouvelle version : " new
  echo "$new" >&1; #redirige la reponse
}



#fonctions fichiers locaux
function streamlist() #pas d'argument
{
  nb_stream=$((`wc -l $folder/streams | cut -d " " -f 1`)) #nombre de flux
  echo "Liste des flux :"
  for i in $(seq 1 $nb_stream); do #variable globale
  stream=`more $folder/streams | head -n $i | tail -n 1 | cut -d % -f 2`; #recupere le nom du flux sur la ligne dans streams
  echo "$i. $stream";
  done
}

function articledelete() # (nomFichier numeroFlux)
{
  server=`more $folder/streams | head -n $2 | tail -n 1 | cut -d % -f 4` #recupere adresse serveur
  user=`more $folder/streams | head -n $2 | tail -n 1 | cut -d % -f 10` #recupere utilisateur serveur
  cd /tmp
  echo -e "Recuperation des contenus...\nConnexion au serveur..."
  envoyer 4 "$user" "$server" "$1" #get-ftp ->recevoir
  line;
  echo "Liste des articles :"
  code_lines=$((`wc -l $1 | cut -d " " -f 1` - 7)); #recupere nombre de lignes de code pour les articles
  nb_articles=`more $1 | tail -n $code_lines | grep '<title>' | wc -l | cut -d " " -f 1`; #compte les articles
  for i in $(seq 1 $nb_articles); do                                                      #affiche les articles ligne par ligne
    list=`more $1 | tail -n $code_lines | grep '<title>' | cut -d '<' -f 2 | cut -d '>' -f 2 | head -n $i | tail -n 1`; 
    echo "$i. $list"; 
  done;
  read -p "A supprimer : " todel
  head -n $((7 + ($todel - 1) * 8)) $1 > /tmp/rss.xml #recupere le debut
  tail -n $((3 + ($nb_articles - $todel) * 8 - 1)) /tmp/$1 >> /tmp/rss.xml #recupere la fin
  mv /tmp/rss.xml $1 #renomme la copie et remplace l'original
  echo "5 secondes avant envoi, Ctrl+C pour annuler."
  echo "5" ; sleep 1 ; echo "4" ; sleep 1 ; echo "3" ; sleep 1 ; echo "2" ; sleep 1 ; echo "1" ; sleep 1 ; echo "0" ;
  echo "Connexion pour envoi..."
  envoyer 3 "$user" "$server" "$1" #update-ftp
  echo "Suppression effectuée !"
  sleep 3
}

function createarticle() #(nomFichier numeroFluxPourPermalink)
{
  server=`more $folder/streams | head -n $2 | tail -n 1 | cut -d % -f 4` #recupere adresse serveur
  user=`more $folder/streams | head -n $2 | tail -n 1 | cut -d % -f 10` #recupere utilisateur
  cd /tmp #repertoire de travail
  echo "Récupération des contenus..."
  envoyer 4 "$user" "$server" "$1" #get-ftp
  line;
  read -p "Titre : " titre
  read -p "URL (site ou carte GoogleMaps format court) : " address
  read -p "Description : " description
  line;
  permalink=`more $folder/streams | head -n $2 | tail -n 1 | cut -d % -f 6`
  head -n 7 $1 > /tmp/rss.xml #recupere le debut
  echo -e "<item>\n<title>$titre</title>\n<link>"$address"</link>\n<guid>$permalink</guid>\n<description>$description</description>\n<pubDate>`setdate;`</pubDate>\n</item>\n" >> /tmp/rss.xml #ecrit le nouvel article
  tail -n $((`wc -l $1 | cut -d " " -f 1` - 7)) $1 >> /tmp/rss.xml # recupere la fin
  mv /tmp/rss.xml $1 #renomme la copie et remplace l'original
  echo "5 secondes avant envoi, Ctrl+C pour annuler."
  echo "5" ; sleep 1 ; echo "4" ; sleep 1 ; echo "3" ; sleep 1 ; echo "2" ; sleep 1 ; echo "1" ; sleep 1 ; echo "0" ;
  echo "Connexion pour envoi..." ;
  envoyer 3 "$user" "$server" "$1" ; #update-ftp
  echo "Article publié !" ;
  sleep 3 ;
}



#fonctions mise a jour de flux
function setdate()
{
  date=`date -R --utc | cut -c 1-25`
  day=`echo $date | cut -c 6`
  final=UTC
  if [ '$date' != '0' ] ; then
    final=`echo "$date UTC"`
  else
    final=`echo $date | cut -c 1-5; echo $date | cut -c 7-25; echo " UTC"`;
  fi
  echo $final #retour au format rfc822 conforme aux rss
}

function manage_article() # (1-ecrire|2-supprimer numeroFlux)
{
  stream=`more $folder/streams | head -n $2 | tail -n 1 | cut -d % -f 8` #nom du fichier
  case $1 in
    '1') createarticle $stream $2; ;; #nomFichier numeroFluxPourPermalink
    '2') articledelete $stream $2; ;; #nomFichier numeroFlux
  esac
}

function envoyer() # (mode user server file)
{
  case $1 in
    '1') cd /tmp ; $folder/send-ftp "$2" "$3" "$4" ;; #creation
    '2') cd /tmp ; $folder/remove-ftp "$2" "$3" "$4" ;; #suppression
    '3') cd /tmp ; $folder/update-ftp "$2" "$3" "$4" ;; #upload
    '4') cd /tmp ; $folder/get-ftp "$2" "$3" "$4" ;; #download
  esac
}



#fonctions creation de flux
function writechannel() #(file stream url description FTP user) from setchannel
{
  line;
  echo -e "Nom de fichier : $1\nTitre du flux : $2\nURL : $3\nDescription : $4\nFTP : $5\nUtilisateur FTP : $6"
  read -p "Ces informations sont-elles correctes ? (o/N) " okay
  line;
  case $okay in
  [oO]) echo -e "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<rss version=\"2.0\">\n<channel>\n<title>$2</title>\n<link>$3</link>\n<description>$4</description>\n\n</channel>\n</rss>"> /tmp/`echo $1`.xml; #Ecriture de la trame principale
        echo -e "\nname%$2% ftp%$5% http%$3% file%$1.xml% user%$6%" >> $folder/streams;
        sed -i '/^$/d' $folder/streams;
        echo "5 secondes avant envoi, Ctrl+C pour annuler."
        echo "5" ; sleep 1 ; echo "4" ; sleep 1 ; echo "3" ; sleep 1 ; echo "2" ; sleep 1 ; echo "1" ; sleep 1 ; echo "0" ;
        echo "Connexion pour envoi..."
        envoyer 1 "$6" "$5" "$1.xml"; #send-ftp
        echo "Flux \"$2\" créé et uploadé avec succès !";
        sleep 3; ;;

  ''|[nN]) one="$1" ; two="$2" ; three="$3" ; four="$4" ; five="$5" ; six="$6" ;  #correction demandée
      echo -e "Correction :\n1. Nom de fichier\n2. Titre\n3. URL\n4. Description\n5. FTP"
      read -p "Votre choix : " correc
      line;
      case $correc in
        '1') one=`modify | tail -n 1` ;;
        '2') two=`modify | tail -n 1` ;;
        '3') three=`modify | tail -n 1` ;;
        '4') four=`modify | tail -n 1` ;;
        '5') five=`modify | tail -n 1` ;;
        '6') six=`modify | tail -n 1` ;;
      esac
      writechannel "$one" "$two" "$three" "$four" "$five" "$six" ;; # erreur ou vérification

  *) echo "Réponse incorrecte." ; sleep 1 ; writechannel "$1" "$2" "$3" "$4" "$5" "$6"; ;; #cas d'erreur
  esac
}

function setchannel() # (file) from createstream
{
  read -p "Titre du flux : " titre
  read -p "URL du site : " url
  read -p "Description du flux : " description
  read -p "Serveur FTP : " ftp
  read -p "Nom d'utilisateur pour le serveur FTP : " user
  if [ $# == '1' ] ; then
    writechannel "$1" "$titre" "$url" "$description" "$ftp" "$user";
  else
    echo -e "\nname%$titre% ftp%$ftp% http%$url% file%$1.xml% user%$user%" >> $folder/streams;
    sed -i '/^$/d' $folder/streams;
    echo "Flux \"$titre\" ajouté !"
    sleep 3;
  fi
}

function createstream() # from submenu2-option 1
{
  read -p "Nom du fichier (sans extension) : " file
  if [ ! -z "$file" ] ; then
    setchannel "$file";
  else
    createstream;
  fi
}

function addstream() # from submenu2-option 2
{
  line;
  read -p "Nom du fichier (sans extension) : " file
  if [ ! -z "$file" ] ; then
    setchannel "$file" 1; #remplit le fichier streams
  else
    addstream; #recommencer si nom de fichier vide
  fi
}

function deletestream() # from submenu2-option 3
{
  line;
  sed -i '/^$/d' $folder/streams;
  streamlist;
  line;
  read -p "Flux à supprimer : " todel
  server=`more $folder/streams | head -n $todel | tail -n 1 | cut -d % -f 4` #recupere adresse serveur
  file=`more $folder/streams | head -n $todel | tail -n 1 | cut -d % -f 8` #recupere nom de fichier
  user=`more $folder/streams | head -n $todel | tail -n 1 | cut -d % -f 10` #recupere utilisateur
  cd /tmp #repertoire de travail
  echo "5 secondes avant envoi, Ctrl+C pour annuler."
  echo "5" ; sleep 1 ; echo "4" ; sleep 1 ; echo "3" ; sleep 1 ; echo "2" ; sleep 1 ; echo "1" ; sleep 1 ; echo "0" ;
  echo "Connexion pour envoi..." ;
  envoyer 2 "$user" "$server" "$file" ; #remove-ftp
  sed -i "`echo $todel`d" $folder/streams ;
  echo "Flux supprimé" ;
  sleep 3 ;
}

function forgetstream() #from submenu2-option 4
{
  line;
  sed -i '/^$/d' $folder/streams;
  streamlist;
  read -p "Flux à oublier : " toforget
  name=`more $folder/streams | head -n $toforget | tail -n 1 | cut -d % -f 2` #recupere nom
  read -p "Etes-vous sûr de vouloir oublier \"$name\" ? (o/N) " okay
  case $okay in
    [oO]) sed -i "`echo $toforget`d" $folder/streams ;
          echo "Flux \"$name\" oublié !"; sleep 3; ;;
    ''|[nN]) return 0; ;;
  esac
}



#menus :
function submenu1() #from menu-option 1
{
  line;
  echo -e "\033[1;34;40m...................................:Articles:...................................\033[0;34m"
  line;
  if [ $nb_stream != '0' ] ; then
    streamlist;
    line;
    read -p "Flux concerné : " flux ;
    line;
    echo -e "1. Ecrire un article\n2. Supprimer un article\n3. Annuler" ;
    read -p "Votre choix : " todo ;
    if [ $todo == '3' ] ; then return 0; fi
    line;
    manage_article $todo $flux;
  else
    echo "Il n'y a pas encore de flux. Il faut en créer un.";
    sleep 3;
  fi
}

function submenu2() #from menu-option 2
{
  line;
  echo -e "\033[1;32;40m.....................................:Flux:.....................................\033[0;32m"
  line;
  echo -e "1. Créer un flux\n2. Ajouter un flux déjà existant\n3. Supprimer un flux\n4. Oublier un flux\n5. Annuler" ;
  read -p "Votre choix : " todo ;
  if [ $todo == '5' ] ; then
    return 0;
  elif [ $todo == '4' ] ; then
    clear;
    forgetstream;
  elif [ $todo == '3' ] && [ $nb_stream != '0' ] ; then
    clear;
    deletestream;
    line;
  elif [ $todo == '3' ] && [ $nb_stream == '0' ] ; then
    echo "Il n'y a pas encore de flux !";
    sleep 2;
    line;
    clear;
    submenu2;
  elif [ $todo == '2' ] ; then
    clear;
    addstream;
  elif [ $todo == '1' ] ; then
    clear;
    createstream;
    line;
  else
    echo "Réponse invalide !";
    sleep 2;
    line;
    submenu2;
  fi
}

function menu() #main
{
  clear;
  nb_stream=$((`wc -l $folder/streams | cut -d " " -f 1`)) #nombre de flux
  line;
  echo -e "\033[1;31;40m................................:Menu Principal:................................\033[0;31m"
  line;
  echo -e "1. Gérer les articles\n2. Gérer les flux\n3. Quitter"
  read -p "Votre choix : " menu
  line;
  case $menu in
    '1') clear; submenu1; ;;
    '2') clear; submenu2; ;;
    '3') clear; exit; ;;
    *) echo "Réponse incorrecte." ; sleep 1 ; menu; ;;
  esac
  menu;
}

function update()
{
  echo "Recherche de version plus récente..."
  cd /tmp
  wget -q https://raw.github.com/theCmaker/shell/master/rss-manager/update;
  last=`more update | cut -sd ";" -f 1 | tail -n 1`
  last_sec=`date -d "$last" +"%s"`
  install_date="aaaa-mm-jj"
  install_date_sec=`date -d $install_date +"%s"`
  if [ $install_date_sec -lt $last_sec ] ; then
    wget -q 'https://github.com/theCmaker/shell/blob/master/rss-manager/rss-manager.tar.gz?raw=true';
    tar -xvzf rss-manager.tar.gz*;
    /tmp/rss-manager/install $folder ;
  else
    echo "La dernière version disponible est déjà installée.";
  fi
}


folder="/opt/lampp/htdocs/tests/rss_files" # dossier d'installation
nb_stream=$((`wc -l $folder/streams | cut -d " " -f 1`)) #nombre de flux

if [ $# == 1 ] ; then # arguments à l'appel
  case $1 in 
    '-a') clear; submenu1; clear; ;;
    '-l') streamlist; read -p "Appuyer sur une touche pour continuer. " i; exit; ;;
    '-f') clear; submenu2; clear; ;;
    '--update') clear; update; clear; exit; ;;
    *) echo "Invalid argument $1 !";;
  esac
elif [ $# == 0 ] ; then #appel simple
  menu;
else
  echo "Too many arguments !"
fi